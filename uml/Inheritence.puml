@startuml
'https://plantuml.com/class-diagram

abstract class AbstractFlyingObject
{
    # locationX:int
    # locationY:int
    # speedX:int
    # speedY:int
    # image:BufferedImage
    # width:int
    # height:int
    # isValid:boolean

    + AbstractFlyingObject(int locationX, int locationY, int speedX, int speedY)
    + forward():void
    + crash(AbstractFlyingObject flyingObject):boolean
    + setLocation(double locationX, double locationY):void
    + getLocationX():int
    + getLocationY():int
    + getSpeedY():int
    + getImage():BufferedImage
    + getWidth():int
    + getHeight():int
    + notValid():boolean
    + vanish():void
}
abstract class AbstractAircraft
{
	# maxHp:int
    # hp:int
    + AbstractAircraft(int locationX, int locationY, int speedX, int speedY, int hp)
    + decreaseHp(int decrease):void
    + getHp():int
    + {abstract} shoot():List<BaseBullet>
 }


class HeroAircraft {
    - instance:HeroAircraft
    - shootNum:int
    - power:int
    - direction:int
    + HeroAircraft(int locationX, int locationY, int speedX, int speedY, int hp)
    + forward():void
    + shoot():List<BaseBullet>
}
HeroAircraft <|-- HeroAircraft::instance
AbstractAircraft <|-- HeroAircraft

class MobEnemy {
    + MobEnemy(int locationX, int locationY, int speedX, int speedY, int hp)
    + forward():void
    + shoot():List<BaseBullet>
}
AbstractAircraft <|-- MobEnemy

class EliteEnemy {
    + EliteEnemy(int locationX, int locationY, int speedX, int speedY, int hp)
    + forward():void
    + shoot():List<BaseBullet>
}
AbstractAircraft <|-- EliteEnemy

abstract class BaseBullet
{
    - power:int
    + BaseBullet(int locationX, int locationY, int speedX, int speedY, int power)
    + forward():void
	+ getPower():int
}

class HeroBullet {
    + HeroBullet(int locationX, int locationY,
     int speedX, int speedY, int power)
}

class EnemyBullet {
    + EnemyBullet(int locationX, int locationY,
     int speedX, int speedY, int power)
}

BaseBullet <|-- HeroBullet
BaseBullet <|-- EnemyBullet

abstract class BaseProps
{
    + Baseprops(int locationX, int locationY, int speedX, int speedY)
    + forward():void
	+ act():void
}

class HpProps{
    + HpProps(int locationX, int locationY, int speedX, int speedY)
}

class FireProps{
    + FireProps(int locationX, int locationY, int speedX, int speedY)
}

class BombProps{
    + BombProps(int locationX, int locationY, int speedX, int speedY)
}

BaseProps <|-- HpProps
BaseProps <|-- FireProps
BaseProps <|-- BombProps

AbstractFlyingObject <|-- AbstractAircraft
AbstractFlyingObject <|-- BaseBullet
AbstractFlyingObject <|-- BaseProps

interface EnemyAircraftFactory{
    + createEnemyAircraft(int locationX, int locationY, int speedX, int speedY, int hp):AbstractAircraft
}

class MobEnemyFactory{
    + createEnemyAircraft(int locationX, int locationY, int speedX, int speedY, int hp):MobEnemy
}

class EliteEnemyFactory{
    + createEliteAircraft(int locationX, int locationY, int speedX, int speedY, int hp):EliteEnemy
}

MobEnemy <.. MobEnemyFactory
EnemyAircraftFactory <|.. MobEnemyFactory
EliteEnemy <.. EliteEnemyFactory
EnemyAircraftFactory <|.. EliteEnemyFactory

interface PropsFactory{
    + createProps(int locationX, int locationY, int speedX, int speedY):BaseProps
}

class HpPropsFactory{
    + createProps(int locationX, int locationY, int speedX, int speedY):HpProps
}

class FirePropsFactory{
    + createProps(int locationX, int locationY, int speedX, int speedY):FireProps
}

class BombPropsFactory{
    + createProps(int locationX, int locationY, int speedX, int speedY):BombProps
}

HpProps <.. HpPropsFactory
PropsFactory <|.. HpPropsFactory

BombProps <.. BombPropsFactory
PropsFactory <|.. BombPropsFactory

FireProps <.. FirePropsFactory
PropsFactory <|.. FirePropsFactory

@enduml